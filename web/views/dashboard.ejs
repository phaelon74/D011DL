<%- include('partials/header') %>

<div class="container">
    <h1>Dashboard</h1>
    <a href="/logout">Logout</a>

    <h2>Download Hugging Face Model</h2>
    <form action="/start-download" method="POST">
        <input type="text" name="authorRepo" placeholder="e.g., TheDrummer/Behemoth-X-123B-v2" required style="width: 300px;">
        <button type="submit">Download</button>
    </form>
    <div id="parsed-result"></div>
    <div id="tree-container"></div>

    <h2>Tracked Models</h2>
    <div style="margin: 10px 0; text-align: right;">
        <form method="POST" action="/scan-local" style="display: inline;">
            <button type="submit">Scan Local Disk</button>
        </form>
        <form method="POST" action="/scan-network" style="display: inline; margin-left: 8px;">
            <button type="submit">Scan Network Disk</button>
        </form>
    </div>
    <table>
        <thead>
            <tr>
                <th>Author</th>
                <th>Repo</th>
                <th>Revision(s)</th>
                <th>Status / Progress</th>
                <th>Last Status / Speed</th>
                <th>Location(s)</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <% if (groups && groups.length > 0) { %>
                <% groups.forEach((group, gi) => { %>
                    <tr>
                        <td><%= group.author %></td>
                        <td><%= group.repo %></td>
                        <td>
                            <div style="display:flex; flex-wrap: wrap; gap: 6px; margin-bottom: 6px;">
                                <% group.revisions.forEach((rev) => { %>
                                    <% const job_status = rev.job_status; %>
                                    <% const badgeBg = (job_status === 'running' || job_status === 'queued') ? '#fff4e5' : (job_status === 'failed' ? '#ffe6e6' : '#e6ffed'); %>
                                    <% const badgeBorder = (job_status === 'running' || job_status === 'queued') ? '#ffb84d' : (job_status === 'failed' ? '#ff4d4d' : '#2ecc71'); %>
                                    <span style="padding:2px 6px; border-radius:12px; border:1px solid <%= badgeBorder %>; background:<%= badgeBg %>; font-size:12px;">
                                        <strong><%= rev.revision %></strong>
                                        <% if (job_status) { %>
                                            <span style="opacity:0.7;">(<%= job_status %>)</span>
                                        <% } %>
                                    </span>
                                <% }) %>
                            </div>
                            <div>
                                <label for="rev-select-<%= gi %>">Action revision:</label>
                                <select id="rev-select-<%= gi %>" data-group="<%= gi %>" onchange="updateLocationsForGroup(<%= gi %>)">
                                    <% group.revisions.forEach((rev) => { %>
                                        <option value="<%= rev.id %>"><%= rev.revision %></option>
                                    <% }) %>
                                </select>
                            </div>
                        </td>
                        <td>—</td>
                        <td>—</td>
                        <td>
                            <div>
                                <label for="loc-select-<%= gi %>">Source path:</label>
                                <select id="loc-select-<%= gi %>"></select>
                            </div>
                            <div style="margin-top:6px;">
                                <label for="dest-root-<%= gi %>">Destination:</label>
                                <select id="dest-root-<%= gi %>">
                                    <option value="primary">Primary (/media/models)</option>
                                    <option value="network">Network (/media/netmodels)</option>
                                </select>
                            </div>
                        </td>
                        <td>
                            <div style="display:flex; gap:6px; flex-wrap: wrap;">
                                <button type="button" onclick="submitGroupAction(<%= gi %>, 'copy')">Copy</button>
                                <button type="button" onclick="submitGroupAction(<%= gi %>, 'move')">Move</button>
                                <button type="button" onclick="submitGroupAction(<%= gi %>, 'delete')">Delete</button>
                                <button type="button" onclick="submitGroupAction(<%= gi %>, 'rescan')">Rescan</button>
                                <button type="button" onclick="submitGroupAction(<%= gi %>, 'hfup')">HFUP</button>
                            </div>
                        </td>
                    </tr>
                <% }) %>
            <% } else if (models && models.length > 0) { %>
                <% models.forEach(model => { %>
                    <% 
                        // Show rows when there is any model record
                        const shouldDisplay = true; 
                    %>
                    <% if(shouldDisplay) { %>
                    <tr>
                        <td><%= model.author %></td>
                        <td><%= model.repo %></td>
                        <td><%= model.revision %></td>
                        <td class="status-cell">
                            <% const job_status = model.job_status; %>
                            <% const job_type = model.job_type; %>
                            <% const download_status = model.download_status; %>

                            <% if (job_status === 'running' || job_status === 'queued') { %>
                                <div class="status-running">
                                    <strong>
                                        <% if (job_type === 'download') { %>
                                            <%= job_status === 'queued' ? 'Queued (download)' : 'Downloading...' %>
                                        <% } %>
                                        <% if (job_type === 'copy') { %>
                                            <%= job_status === 'queued' ? 'Queued (copy)' : 'Copying...' %>
                                        <% } %>
                                        <% if (job_type === 'move') { %>
                                            <%= job_status === 'queued' ? 'Queued (move)' : 'Moving...' %>
                                        <% } %>
                                        <% if (job_type === 'upload') { %>
                                            <%= job_status === 'queued' ? 'Queued (upload)' : 'Uploading to HF...' %>
                                        <% } %>
                                    </strong>
                                </div>
                                <% if (job_status === 'running' && (job_type === 'download' || job_type === 'copy' || job_type === 'move' || job_type === 'upload') && model.total_bytes > 0) { %>
                                    <progress value="<%= model.bytes_downloaded %>" max="<%= model.total_bytes %>"></progress>
                                    <div class="progress-text">
                                        <%= (model.bytes_downloaded / 1024 / 1024).toFixed(2) %> MB / 
                                        <%= (model.total_bytes / 1024 / 1024).toFixed(2) %> MB
                                    </div>
                                <% } %>
                            <% } else if (job_status === 'failed') { %>
                                <div class="status-failed" title="Error: <%= model.job_log || 'Unknown error' %>">
                                    failed
                                </div>
                            <% } else if (model.is_downloaded || (model.locations && model.locations.length > 0)) { %>
                                <div class="status-succeeded">succeeded</div>
                            <% } %>
                        </td>
                        <td>
                            <% if (model.job_id && model.job_status === 'succeeded') { %>
                                <div>
                                    <strong><%= (model.job_type === 'download' ? 'Download' : (model.job_type === 'copy' ? 'Copy' : 'Move')) %></strong>
                                </div>
                                <% 
                                    const started = model.job_started_at ? new Date(model.job_started_at) : null;
                                    const finished = model.job_finished_at ? new Date(model.job_finished_at) : null;
                                    const durationSec = (started && finished) ? Math.max(0, (finished - started) / 1000) : null;
                                    const totalBytes = model.total_bytes || 0;
                                    const mb = totalBytes / 1024 / 1024;
                                    const speedMBs = (durationSec && durationSec > 0) ? (mb / durationSec) : null;
                                %>
                                <div>
                                    <%= speedMBs !== null ? speedMBs.toFixed(2) + ' MB/s' : '—' %>
                                </div>
                                <div>
                                    <%= durationSec !== null ? durationSec.toFixed(1) + ' s' : '—' %>
                                </div>
                            <% } else { %>
                                <div>—</div>
                                <div>—</div>
                                <div>—</div>
                            <% } %>
                        </td>
                        <td>
                            <% if (model.locations && model.locations.length > 0) { %>
                                <%= model.locations.join(', ') %>
                            <% } %>
                        </td>
                        <td>
                            <% const isJobActive = job_status === 'running' || job_status === 'queued'; %>

                            <% if (job_status === 'failed' && job_type === 'download') { %>
                                <form method="POST" style="display: inline;">
                                    <button type="submit" formaction="/retry-download/<%= model.job_id %>">Retry</button>
                                </form>
                            <% } %>

                            <% const hasPrimary = (model.locations || []).some(l => l.startsWith(storageRoot || '/media/models'));
                               const hasNet = (model.locations || []).some(l => l.startsWith(netStorageRoot || '/media/netmodels'));
                               const hasAnyLocation = hasPrimary || hasNet;
                            %>
                            <% if (hasAnyLocation || model.is_downloaded) { %>
                                <form method="POST" style="display: inline;">
                                    <% const copyDisabled = isJobActive || (hasPrimary && hasNet);
                                       let copyAction = `/copy-model/${model.id}`;
                                    %>
                                    <button type="submit" formaction="<%= copyAction %>" <%= copyDisabled ? 'disabled' : '' %>>Copy</button>
                                    <% const moveEnabled = (!isJobActive) && hasPrimary && !hasNet; %>
                                    <button type="submit" formaction="/move-model/<%= model.id %>" <%= moveEnabled ? '' : 'disabled' %>>Move</button>
                                    <button type="button" onclick="window.location.href='/delete-model/<%= model.id %>'" <%= isJobActive ? 'disabled' : '' %>>Delete</button>
                                    <button type="submit" formaction="/models/<%= model.id %>/rescan" <%= isJobActive ? 'disabled' : '' %>>Rescan</button>
                                    <% // HF Upload button: enabled for Dude models when HF branch is missing OR effectively empty (server computes canHfUp)
                                       const isDude = model.author === 'TheHouseOfTheDude';
                                       const canHfUp = !!model.canHfUp && isDude;
                                    %>
                                    <button type="submit" formaction="/hf-upload/<%= model.id %>" <%= (isJobActive || !canHfUp) ? 'disabled' : '' %>>HFUP</button>
                                </form>
                            <% } else { %>
                                <form method="POST" style="display: inline;">
                                    <button type="submit" formaction="/retry-model/<%= model.id %>" <%= isJobActive ? 'disabled' : '' %>>Retry</button>
                                    <button type="submit" formaction="/delete-model-immediate/<%= model.id %>" <%= isJobActive ? 'disabled' : '' %>>Delete</button>
                                </form>
                            <% } %>
                        </td>
                    </tr>
                    <% } %>
                <% }) %>
            <% } %>
        </tbody>
    </table>
</div>

<div class="refresh-container">
    <label for="refreshInterval">Auto-refresh:</label>
    <select id="refreshInterval">
        <option value="0" selected>Off</option>
        <option value="5">5s</option>
        <option value="10">10s</option>
        <option value="15">15s</option>
        <option value="30">30s</option>
        <option value="60">60s</option>
    </select>
    <span id="refreshTimer"></span>
</div>

<script>
    // Client-side helpers for grouped actions
    const groupData = <%- JSON.stringify(groups || []) %>;

    function getSelectedModel(groupIndex) {
        const select = document.getElementById('rev-select-' + groupIndex);
        const modelId = select ? select.value : null;
        const group = groupData[groupIndex];
        const model = group && modelId ? (group.revisions.find(r => r.id === modelId) || null) : null;
        return { modelId, model };
    }

    function updateLocationsForGroup(groupIndex) {
        const { model } = getSelectedModel(groupIndex);
        const locSelect = document.getElementById('loc-select-' + groupIndex);
        if (!locSelect) return;
        while (locSelect.firstChild) locSelect.removeChild(locSelect.firstChild);
        const locations = (model && Array.isArray(model.locations) && model.locations.length > 0) ? model.locations : (model && model.root_path ? [model.root_path] : []);
        (locations || []).forEach(loc => {
            const opt = document.createElement('option');
            opt.value = loc;
            opt.textContent = loc;
            locSelect.appendChild(opt);
        });
    }

    function submitPost(url, payload) {
        const form = document.createElement('form');
        form.method = 'POST';
        form.action = url;
        for (const [k, v] of Object.entries(payload || {})) {
            const input = document.createElement('input');
            input.type = 'hidden';
            input.name = k;
            input.value = typeof v === 'string' ? v : JSON.stringify(v);
            form.appendChild(input);
        }
        document.body.appendChild(form);
        form.submit();
    }

    function submitGroupAction(groupIndex, action) {
        const { modelId, model } = getSelectedModel(groupIndex);
        if (!modelId) return;
        const sourcePathSelect = document.getElementById('loc-select-' + groupIndex);
        const sourcePath = sourcePathSelect && sourcePathSelect.value ? sourcePathSelect.value : undefined;
        const destRootSel = document.getElementById('dest-root-' + groupIndex);
        const destinationRoot = destRootSel ? destRootSel.value : undefined;

        if (action === 'delete') {
            window.location.href = '/delete-model/' + modelId;
            return;
        }
        if (action === 'copy') {
            submitPost('/copy-model/' + modelId, { sourcePath, destinationRoot });
            return;
        }
        if (action === 'move') {
            submitPost('/move-model/' + modelId, { sourcePath, destinationRoot });
            return;
        }
        if (action === 'rescan') {
            submitPost('/models/' + modelId + '/rescan', {});
            return;
        }
        if (action === 'hfup') {
            // Allow revision override to match selected model's revision
            const rev = model && model.revision ? model.revision : undefined;
            submitPost('/hf-upload/' + modelId, { revision: rev });
            return;
        }
    }

    // Initialize location selects on load
    document.addEventListener('DOMContentLoaded', function() {
        (groupData || []).forEach((g, gi) => updateLocationsForGroup(gi));
    });
</script>

<%- include('partials/footer') %>
