<%- include('partials/header') %>

<div class="container">
    <h1>Dashboard</h1>
    <a href="/logout">Logout</a>

    <h2>Download Hugging Face Model</h2>
    <form action="/start-download" method="POST">
        <input type="text" name="authorRepo" placeholder="e.g., TheDrummer/Behemoth-X-123B-v2" required style="width: 300px;">
        <button type="submit">Download</button>
    </form>
    <div id="parsed-result"></div>
    <div id="tree-container"></div>

    <h2>Tracked Models</h2>
    <table>
        <thead>
            <tr>
                <th>Author</th>
                <th>Repo</th>
                <th>Revision</th>
                <th>Status / Progress</th>
                <th>Last Status / Speed</th>
                <th>Location(s)</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <% if (models && models.length > 0) { %>
                <% models.forEach(model => { %>
                    <% 
                        // A model should be displayed if it has a location on disk, is marked as downloaded, or has any job associated with it.
                        const shouldDisplay = (model.locations && model.locations.length > 0) || model.is_downloaded || model.job_id; 
                    %>
                    <% if(shouldDisplay) { %>
                    <tr>
                        <td><%= model.author %></td>
                        <td><%= model.repo %></td>
                        <td><%= model.revision %></td>
                        <td class="status-cell">
                            <% const job_status = model.job_status; %>
                            <% const job_type = model.job_type; %>
                            <% const download_status = model.download_status; %>

                            <% if ((job_status === 'running' || job_status === 'queued')) { %>
                                <div class="status-running">
                                    <strong>
                                        <% if (job_type === 'download') { %> Downloading... <% } %>
                                        <% if (job_type === 'copy') { %> Copying... <% } %>
                                        <% if (job_type === 'move') { %> Moving... <% } %>
                                    </strong>
                                </div>
                                <% if ((job_type === 'download' || job_type === 'copy') && model.total_bytes > 0) { %>
                                    <progress value="<%= model.bytes_downloaded %>" max="<%= model.total_bytes %>"></progress>
                                    <div class="progress-text">
                                        <%= (model.bytes_downloaded / 1024 / 1024).toFixed(2) %> MB / 
                                        <%= (model.total_bytes / 1024 / 1024).toFixed(2) %> MB
                                    </div>
                                <% } %>
                            <% } else if (job_status === 'failed') { %>
                                <div class="status-failed" title="Error: <%= model.job_log || 'Unknown error' %>">
                                    failed
                                </div>
                            <% } else if (model.is_downloaded || (model.locations && model.locations.length > 0)) { %>
                                <div class="status-succeeded">succeeded</div>
                            <% } %>
                        </td>
                        <td>
                            <% if (model.job_id && model.job_status === 'succeeded') { %>
                                <div>
                                    <strong><%= (model.job_type === 'download' ? 'Download' : (model.job_type === 'copy' ? 'Copy' : 'Move')) %></strong>
                                </div>
                                <% 
                                    const started = model.job_started_at ? new Date(model.job_started_at) : null;
                                    const finished = model.job_finished_at ? new Date(model.job_finished_at) : null;
                                    const durationSec = (started && finished) ? Math.max(0, (finished - started) / 1000) : null;
                                    const totalBytes = model.total_bytes || 0;
                                    const mb = totalBytes / 1024 / 1024;
                                    const speedMBs = (durationSec && durationSec > 0) ? (mb / durationSec) : null;
                                %>
                                <div>
                                    <%= speedMBs !== null ? speedMBs.toFixed(2) + ' MB/s' : '—' %>
                                </div>
                                <div>
                                    <%= durationSec !== null ? durationSec.toFixed(1) + ' s' : '—' %>
                                </div>
                            <% } else { %>
                                <div>—</div>
                                <div>—</div>
                                <div>—</div>
                            <% } %>
                        </td>
                        <td>
                            <% if (model.locations && model.locations.length > 0) { %>
                                <%= model.locations.join(', ') %>
                            <% } %>
                        </td>
                        <td>
                            <% const isJobActive = job_status === 'running' || job_status === 'queued'; %>

                            <% if (job_status === 'failed' && job_type === 'download') { %>
                                <form method="POST" style="display: inline;">
                                    <button type="submit" formaction="/retry-download/<%= model.job_id %>">Retry</button>
                                </form>
                            <% } %>

                            <% if ((model.is_downloaded || (model.locations && model.locations.length > 0))) { %>
                                <form method="POST" style="display: inline;">
                                    <% 
                                        const hasPrimary = (model.locations || []).some(l => l.startsWith('/media/models'));
                                        const hasNet = (model.locations || []).some(l => l.startsWith('/media/netmodels'));
                                        const copyDisabled = isJobActive || (hasPrimary && hasNet);
                                        let copyAction = `/copy-model/${model.id}`; // same endpoint; server decides direction
                                    %>
                                    <button type="submit" formaction="<%= copyAction %>" <%= copyDisabled ? 'disabled' : '' %>>Copy</button>
                                    <% const moveEnabled = (!isJobActive) && hasPrimary && !hasNet; %>
                                    <button type="submit" formaction="/move-model/<%= model.id %>" <%= moveEnabled ? '' : 'disabled' %>>Move</button>
                                    <button type="button" onclick="window.location.href='/delete-model/<%= model.id %>'" <%= isJobActive ? 'disabled' : '' %>>Delete</button>
                                    <button type="submit" formaction="/models/<%= model.id %>/rescan" <%= isJobActive ? 'disabled' : '' %>>Rescan</button>
                                </form>
                            <% } %>
                        </td>
                    </tr>
                    <% } %>
                <% }) %>
            <% } %>
        </tbody>
    </table>
</div>

<div class="refresh-container">
    <label for="refreshInterval">Auto-refresh:</label>
    <select id="refreshInterval">
        <option value="0" selected>Off</option>
        <option value="5">5s</option>
        <option value="10">10s</option>
        <option value="15">15s</option>
        <option value="30">30s</option>
        <option value="60">60s</option>
    </select>
    <span id="refreshTimer"></span>
</div>

<%- include('partials/footer') %>
